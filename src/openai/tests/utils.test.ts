import { isCommentByAssistant, escapeComment, unescapeComment, escapeUser } from '../utils'

describe('isCommentByAssistant', () => {
  test('should return true when comment starts with ASSISTANT_COMMENT_PREFIX', () => {
    const comment = '<!-- AdaGPT --> Hello world! <!-- /AdaGPT -->'
    expect(isCommentByAssistant(comment)).toBe(true)
  })

  test('should return false when comment does not start with ASSISTANT_COMMENT_PREFIX', () => {
    const comment = 'Hello world!'
    expect(isCommentByAssistant(comment)).toBe(false)
  })
})

describe('escapeComment', () => {
  test('should return the comment with prefix, suffix, and link appended', () => {
    const comment = 'Hello world!'
    const expected = `<!-- AdaGPT -->\n${comment}\n<!-- /AdaGPT -->\n<sub>generated by [AdaGPT](https://github.com/zirkelc/AdaGPT)</sub>`
    expect(escapeComment(comment)).toBe(expected)
  })
})

describe('unescapeComment', () => {
  test('should return the comment without prefix and suffix', () => {
    const comment = '<!-- AdaGPT --> Hello world! <!-- /AdaGPT -->'
    expect(unescapeComment(comment)).toBe('Hello world!')
  })

  test('should return the comment as is if it does not contain prefix and suffix', () => {
    const comment = 'Hello world!'
    expect(unescapeComment(comment)).toBe(comment)
  })
})

describe('escapeUser', () => {
  test('should remove [bot] from the end of the user name', () => {
    const user = 'test-bot'
    expect(escapeUser(`${user}[bot]`)).toBe(user)
  })

  test('should remove all special characters from the user name', () => {
    const user = '_te%$#@!^&*()=+[]{}|;:\'",.<>/?st-'
    expect(escapeUser(user)).toBe('_test-')
  })
})
